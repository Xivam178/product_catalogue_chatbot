# -*- coding: utf-8 -*-
"""chatbot_repository.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fd0ROnVZSBSER3ct0IzpZkV96AhaCGs0
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install flask



from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello_world():
    return 'Hello, World!'
if __name__ == '__main__':
    app.run(debug=True)

!python3 -m pip install transformers==4.30.2 torch

from transformers import AutoTokenizer, AutoModelForSeq2SeqLM

model_name = "facebook/blenderbot-400M-distill"

# Load model (download on first run and reference local installation for consequent runs)
model = AutoModelForSeq2SeqLM.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)

conversation_history = []

history_string = "\n".join(conversation_history)

input_text ="hello, how are you doing?"

inputs = tokenizer.encode_plus(history_string, input_text, return_tensors="pt")
print(inputs)

!python3 /content/sample_data











































# Commented out IPython magic to ensure Python compatibility.
# %pip install transformers torch gradio

from transformers import AutoModelForQuestionAnswering, AutoTokenizer, Trainer, TrainingArguments
import pandas as pd
from sklearn.model_selection import train_test_split
import torch

# Load your data
data = pd.read_csv('your_product_data.csv')
train_data, val_data = train_test_split(data, test_size=0.2)

# Define a function to preprocess the data
def preprocess_data(data, tokenizer):
    inputs = tokenizer(data['question'].tolist(), truncation=True, padding=True)
    targets = tokenizer(data['answer'].tolist(), truncation=True, padding=True)
    return torch.utils.data.Dataset.from_dict({
        'input_ids': torch.tensor(inputs['input_ids']),
        'attention_mask': torch.tensor(inputs['attention_mask']),
        'labels': torch.tensor(targets['input_ids'])
    })

# Load pre-trained model and tokenizer
model_name = "distilbert-base-uncased"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForQuestionAnswering.from_pretrained(model_name)

# Preprocess the data
train_dataset = preprocess_data(train_data, tokenizer)
val_dataset = preprocess_data(val_data, tokenizer)

# Define training arguments
training_args = TrainingArguments(
    output_dir='./results',
    num_train_epochs=3,
    per_device_train_batch_size=4,
    per_device_eval_batch_size=4,
    warmup_steps=500,
    weight_decay=0.01,
    logging_dir='./logs',
    logging_steps=10,
)

# Create Trainer instance
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=val_dataset,
)

# Train the model
trainer.train()

import gradio as gr

# Define a function for the chatbot to generate responses
def chatbot(question):
    inputs = tokenizer(question, return_tensors="pt")
    outputs = model(**inputs)
    answer = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return answer

# Create Gradio interface
iface = gr.Interface(fn=chatbot, inputs="text", outputs="text")
iface.launch()







